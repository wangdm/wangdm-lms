<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xsi:schemaLocation="
            http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/mvc 
            http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
        ">
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        
        <property name="loginUrl" value="/login"/>
        <property name="successUrl" value="/member"/>
        <property name="unauthorizedUrl" value="/403"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
<!--         <property name="filters"> -->
<!--             <util:map> -->
<!--                 <entry key="anAlias" value-ref="someFilter"/> -->
<!--             </util:map> -->
<!--         </property> -->
        <property name="filterChainDefinitions">
            <value>
                /member = authc
                /login = authc
                /logout = logout
                /admin = authc, roles[admin]
                /docs = authc, perms[document:read]
            </value>
        </property>
    </bean>
    
    <!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->
    <!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
    <!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->
    <!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->
<!--     <bean id="someFilter" class="..."/> -->
<!--     <bean id="anotherFilter" class="..."></bean> -->

<!--     缓存管理器 使用Ehcache实现   -->
<!--     <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">   -->
<!--         <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>   -->
<!--     </bean>   -->
    
    <!-- 会话管理器 -->  
<!--     <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">   -->
<!--         <property name="globalSessionTimeout" value="1800000"/>   -->
<!--         <property name="deleteInvalidSessions" value="true"/> -->
<!--     </bean>   -->
    
    <!-- 安全管理器 -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="myRealm"/>
<!--         <property name="sessionManager" ref="sessionManager"/>   -->
<!--         <property name="cacheManager" ref="cacheManager"/>   -->
        <!-- By default the servlet container sessions will be used.  Uncomment this line
             to use shiro's native sessions (see the JavaDoc for more): -->
        <!-- <property name="sessionMode" value="native"/> -->
    </bean>
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    
    <!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
    <bean id="myRealm" class="com.wangdm.test.shiro.MyShiroRealm" />

</beans>